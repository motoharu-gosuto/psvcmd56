#include "EncDecWPortabilityService.h"

#include "Crypto/CryptoService.h"

//this service is implemented with the reversing help provided by xerpi

using namespace f00d;

#pragma region cmd_0x2000A_keys_80B960

const unsigned char cmd_0x2000A_keys_80B960[0x14][0x20] = {
   {
      0x4E, 0x95, 0x3B, 0x7F, 0x82, 0x05, 0x62, 0xD4, 0xC9, 0x4D, 0xB4, 0x20, 0x34, 0xD0, 0xE2, 0x6F,
      0x6B, 0x85, 0x5B, 0xDA, 0x78, 0xA5, 0x3D, 0xDB, 0xA5, 0xFE, 0x92, 0x47, 0x3D, 0xE6, 0xA1, 0xB3
   },
   {
      0xEA, 0x3B, 0x52, 0xCB, 0x07, 0xB8, 0x0B, 0x24, 0x2E, 0x77, 0x2B, 0x7F, 0xD7, 0x0B, 0x74, 0x43,
      0x3D, 0xAE, 0xCD, 0x53, 0x1F, 0x97, 0xBD, 0x12, 0x66, 0xCB, 0xD2, 0xFC, 0x63, 0x13, 0x91, 0x83
   },
   {
      0x63, 0x1A, 0x57, 0xF5, 0x46, 0x2B, 0xA3, 0xFD, 0x17, 0x7F, 0x97, 0x3F, 0x20, 0x62, 0xEC, 0x48,
      0x26, 0xD0, 0x93, 0x5D, 0x0D, 0xC6, 0x5D, 0xEE, 0xF6, 0xC9, 0x9E, 0x8A, 0xC6, 0x95, 0x11, 0xC7
   },
   {
      0x24, 0xB5, 0xB7, 0xE0, 0x71, 0x92, 0x7D, 0xEB, 0x44, 0xC3, 0xF5, 0xD2, 0x9E, 0xFC, 0xAD, 0xF5,
      0xCB, 0xB9, 0x23, 0x97, 0x22, 0x83, 0xEC, 0x15, 0x37, 0x0A, 0x0A, 0xF2, 0x6F, 0x98, 0xFB, 0x95
   },
   {
      0x56, 0x9C, 0x77, 0x21, 0x27, 0x25, 0xF9, 0xFE, 0xF4, 0x16, 0x61, 0xF1, 0x59, 0x78, 0xA6, 0x74,
      0x4C, 0x0F, 0x02, 0x9F, 0xAC, 0xE2, 0x21, 0xD7, 0x51, 0x95, 0x8C, 0xA0, 0x85, 0xFE, 0x61, 0x53
   },
   {
      0xDE, 0xAD, 0x01, 0x08, 0x5F, 0x00, 0xD5, 0x13, 0xC3, 0x5D, 0xB4, 0xC5, 0x1E, 0xE2, 0xEC, 0x27,
      0x50, 0xE5, 0xA0, 0xCB, 0xEF, 0x81, 0x47, 0xB4, 0x02, 0x08, 0x05, 0x06, 0x8A, 0x2B, 0xF3, 0x4B
   },
   {
      0xFC, 0xDF, 0x26, 0x1E, 0x1D, 0x91, 0xD3, 0xDF, 0x79, 0x0B, 0x1B, 0x89, 0x89, 0xE0, 0x46, 0xEB,
      0x5B, 0xE0, 0xEB, 0x77, 0x2E, 0xAF, 0x4B, 0xE3, 0xF6, 0xF5, 0x8C, 0x02, 0xC4, 0x29, 0x6C, 0x52
   },
   {
      0xE0, 0x81, 0xD7, 0x7F, 0xFD, 0xD4, 0xC0, 0x00, 0xBA, 0x5E, 0x6C, 0x6F, 0x7B, 0xD8, 0x9D, 0x86,
      0x81, 0x59, 0x0D, 0xDF, 0x5A, 0xC2, 0xBF, 0x59, 0xF4, 0x2E, 0xF5, 0xAD, 0x48, 0xB0, 0x32, 0xE7
   },
   {
      0x5C, 0xB9, 0x2A, 0xAD, 0x7C, 0x97, 0x7D, 0x1D, 0xAD, 0xAF, 0x98, 0x4F, 0x22, 0x72, 0x42, 0x2B,
      0x50, 0x1A, 0xD7, 0x3C, 0xC0, 0x77, 0x61, 0xE3, 0xFA, 0xB9, 0x89, 0x3D, 0x5B, 0x97, 0x96, 0xE5
   },
   {
      0xF7, 0x41, 0x3D, 0x73, 0x39, 0x8A, 0x51, 0xB0, 0xEB, 0xF9, 0xFA, 0xD5, 0xBE, 0x26, 0xF7, 0x6C,
      0x21, 0xC7, 0x66, 0xB3, 0x51, 0xE4, 0x68, 0x6F, 0x45, 0xB1, 0x59, 0xA7, 0xE3, 0x7E, 0x3D, 0xD2
   },
   {
      0x39, 0x74, 0x10, 0x77, 0x20, 0x97, 0x76, 0x56, 0x34, 0xEB, 0x69, 0x6E, 0xF5, 0x82, 0x7F, 0x07,
      0x34, 0x84, 0x84, 0x4D, 0xF5, 0x4F, 0xAF, 0x2B, 0xEF, 0xBE, 0xCB, 0xC0, 0x31, 0xF3, 0xCA, 0xD5
   },
   {
      0x5D, 0x5D, 0xC4, 0x06, 0x5A, 0x8F, 0x77, 0xD3, 0x60, 0xF4, 0xFA, 0xF3, 0x69, 0x51, 0x2F, 0x0D,
      0x6B, 0x38, 0xF2, 0xB4, 0x11, 0x7A, 0x44, 0xA2, 0xF8, 0xE2, 0x3C, 0xC0, 0xE4, 0xEB, 0x3C, 0x25
   },
   {
      0xB4, 0xD1, 0x06, 0x1A, 0xBE, 0xAD, 0xF1, 0x1A, 0x72, 0xF3, 0x46, 0x32, 0xD7, 0xC2, 0xD4, 0x20,
      0x35, 0x83, 0x76, 0x5B, 0x46, 0x2F, 0x74, 0xFB, 0x6D, 0x20, 0x07, 0x40, 0xE4, 0xD6, 0x46, 0x0B
   },
   {
      0xDE, 0xF0, 0x24, 0x70, 0x32, 0xD9, 0x7B, 0x7D, 0x1F, 0x26, 0x82, 0x5A, 0xC8, 0x6F, 0x9A, 0x6C,
      0xAA, 0xBF, 0xA3, 0x70, 0x3E, 0x48, 0x49, 0x2C, 0x9E, 0xC6, 0x52, 0x3F, 0x31, 0x75, 0x57, 0xF7
   },
   {
      0x70, 0x4D, 0x52, 0x4C, 0x29, 0x3C, 0xBF, 0xBA, 0xEE, 0x28, 0x4D, 0xA2, 0x19, 0xA7, 0x43, 0x04,
      0xCF, 0x3F, 0x7E, 0x86, 0xDC, 0x1A, 0x98, 0x99, 0x39, 0x34, 0x9B, 0x62, 0xA7, 0x67, 0x97, 0x42
   },
   {
      0x4C, 0xC2, 0xEE, 0x15, 0xAA, 0x17, 0xD0, 0x87, 0x6E, 0xFC, 0x88, 0xDF, 0x22, 0xC8, 0xB4, 0xEB,
      0x6E, 0xCD, 0xAA, 0x40, 0x7E, 0x5C, 0x29, 0x31, 0xB7, 0xA9, 0x46, 0xE9, 0x5B, 0xEE, 0xCD, 0x50
   },
   {
      0xF0, 0x83, 0xFE, 0x77, 0xB6, 0x64, 0xDD, 0xEC, 0xE7, 0x70, 0x76, 0x82, 0xA6, 0x31, 0x76, 0x58,
      0x1A, 0x1B, 0x58, 0x41, 0xE6, 0x60, 0x88, 0xF5, 0x88, 0x9E, 0x43, 0x57, 0x4A, 0x2F, 0x82, 0x08
   },
   {
      0x5B, 0x59, 0x6C, 0x1D, 0x36, 0xC4, 0xC6, 0xF0, 0x78, 0x99, 0x5F, 0x94, 0x2F, 0x68, 0x0F, 0xC1,
      0x3F, 0xA0, 0xAD, 0x8A, 0xB1, 0x54, 0xE7, 0xAF, 0x05, 0x05, 0xA7, 0x97, 0x00, 0x6C, 0x85, 0xA9
   },
   {
      0x1F, 0x35, 0x58, 0xED, 0xC5, 0xAC, 0x0B, 0x5F, 0x7E, 0xD2, 0xED, 0xAB, 0x8E, 0x71, 0x37, 0x60,
      0xC3, 0x75, 0x83, 0x5E, 0x69, 0x12, 0xEE, 0x57, 0x58, 0xD3, 0xD6, 0xD6, 0xE7, 0xA5, 0x8D, 0x40
   },
   {
      0x21, 0xB6, 0x6B, 0xAE, 0x9C, 0x89, 0x5D, 0x95, 0x75, 0x71, 0x48, 0xDE, 0x3E, 0x47, 0x1E, 0x94,
      0xCE, 0x8A, 0x25, 0x4B, 0x95, 0x20, 0x65, 0x7B, 0x34, 0xC9, 0x2D, 0xCE, 0x6B, 0x66, 0xDD, 0xA6
   }
};

#pragma endregion

int EncDecWPortabilityService::service_0x1(int* f00d_resp, void* ctx, int size) const
{
   *f00d_resp = 0x800F1725;
   return -1;
}

int EncDecWPortabilityService::service_0x2(int* f00d_resp, void* ctx, int size) const
{
   SceSblSmCommEncdecWPortability_2000A* data = (SceSblSmCommEncdecWPortability_2000A*)ctx;

   if (data->key_id < ENCDEC_W_PORTABILITY_SERVICE_KEY_MIN || data->key_id > ENCDEC_W_PORTABILITY_SERVICE_KEY_MAX)
   {
      *f00d_resp = 0x800F1716;
      return -1;
   }

   if (data->input_length != data->output_length)
   {
      *f00d_resp = 0x800F1716;
      return -1;
   }

   if (data->input_length > 0x20)
   {
      *f00d_resp = 0x800F1716;
      return -1;
   }

   if ((data->input_length & 0xF) != 0)
   {
      *f00d_resp = 0x800F1716;
      return -1;
   }

   unsigned char src_buff_80BC80[0x40];
   
   memcpy(src_buff_80BC80, data->input, data->input_length);

   unsigned char dst_buff_80BCC0[0x40];

   //invoke crypto operation
   auto cryptops = CryptoService::get();
   if(cryptops->aes_cbc_decrypt(src_buff_80BC80, dst_buff_80BCC0, data->input_length, cmd_0x2000A_keys_80B960[data->key_id - 1], 0x100, data->iv) < 0)
   {
      *f00d_resp = 0x800F1716;
      return -1;
   }

   memcpy(data->output, dst_buff_80BCC0, data->output_length);

   *f00d_resp = 0;

   return 0;
}


int EncDecWPortabilityService::dispatch(int service_id, int* f00d_resp, void* ctx, int size) const
{
   switch(service_id)
   {
   case ENCDEC_W_PORTABILITY_SERVICE_1000A:
      return service_0x1(f00d_resp, ctx, size);
   case ENCDEC_W_PORTABILITY_SERVICE_2000A:
      return service_0x2(f00d_resp, ctx, size);
   default:
      //not implemented command
      *f00d_resp = -1;
      return -1;
   }

   return 0;
}